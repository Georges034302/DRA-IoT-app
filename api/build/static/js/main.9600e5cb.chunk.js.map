{"version":3,"sources":["store/Pusher.tsx","components/Segment.tsx","components/LEDColor.tsx","components/LED.tsx","components/Motion.tsx","components/Distance.tsx","store/User.tsx","components/Jumbo.tsx","pages/Login.tsx","pages/Sensor.tsx","hoc/Authentication.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["pusherClient","pusher","Pusher","cluster","encrypted","this","validator","SimpleReactValidator","Segment","React","useState","input","setInput","updateState","forceUpdate","useCallback","btnStatus","setStatus","data","setData","inputRef","useRef","useEffect","PusherClient","subscribe","bind","response","JSON","stringify","toggleOnOff","operation","axios","post","then","res","NotificationManager","success","catch","err","error","get","status","console","log","className","onClick","onSubmit","e","preventDefault","numbers","allValid","showMessages","submit","parseInt","finally","hideMessages","displayNumbers","disabled","ref","name","value","onChange","target","message","type","LEDColor","props","setBtnStatus","sendDataLed","formData","color","Fragment","LED","Motion","detected","setDetected","fetchAPI","style","borderRadius","Distance","convert","setConvert","parseFloat","toFixed","meterValue","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","KEY","User","localStorage","setItem","getItem","removeItem","Jumbo","clear","setAuth","Login","username","setUsername","password","setPassword","loginData","payload","token","save","Authentication","ChildComponent","state","auth","setState","load","length","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9600e5cb.chunk.js","sourcesContent":["import Pusher from \"pusher-js\";\n\nclass PusherClient {\n  pusherClient: any;\n\n  constructor() {\n    const pusher = new Pusher(\"13d42090d9298d2858ef\", {\n      cluster: \"ap4\",\n      encrypted: true\n    });\n\n    this.pusherClient = pusher;\n  }\n}\n\nexport default new PusherClient();\n","import React from \"react\";\nimport axios from \"axios\";\nimport { NotificationManager } from \"react-notifications\";\n// import validator from 'validator';\nimport SimpleReactValidator from \"simple-react-validator\";\nimport PusherClient from \"../store/Pusher\";\n\nconst validator = new SimpleReactValidator();\n\nconst Segment: React.FC = () => {\n  const [input, setInput] = React.useState(\"\");\n  const [error, setError] = React.useState(false);\n\n  //   force update component\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const [btnStatus, setStatus] = React.useState(false)\n\n\n  const [data, setData] = React.useState(\"0000\");\n\n  let inputRef: any = React.useRef();\n\n  React.useEffect((): void => {\n  \n    const pusher = PusherClient.pusherClient;\n\n    const channel = pusher.subscribe(\"segment-channel\");\n    channel.bind(\"segment-data-event\", data => {\n      const response = JSON.stringify(data);\n      if(data)\n        setData(response);\n    });\n  }, []);\n\n  const toggleOnOff = (operation: string) => {\n    let url: string = \"/segment-display\";\n    axios\n      .post(url, { operation })\n      .then(res => {\n        NotificationManager.success(\"Success\", \"Sent\");\n      })\n      .catch(err => {\n        NotificationManager.error(\"Error\", \"Something went wrong\");\n      });\n  };\n\n  const displayNumbers = (numbers: string) => {\n    if (!validator.allValid()) {\n      forceUpdate();\n      validator.showMessages();\n      return;\n    } else {\n      let url: string = \"/segment-display/numbers\";\n      let submit: number = parseInt(numbers);\n      axios\n        .post(url, { numbers: JSON.stringify(submit) })\n        .then(res => {\n          NotificationManager.success(\"Success\", \"Sent\");\n        })\n        .catch(err => {\n          NotificationManager.error(\"Error\", \"Something went wrong\");\n        })\n        .finally(() => {\n          setInput(\"\");\n\n          validator.hideMessages();\n          forceUpdate();\n          // inputRef.c = \"\";\n        });\n    }\n  };\n\n  React.useEffect(() => {\n      axios.get('/segment-display')\n      .then((res) => {\n \n        setStatus(res.data.status)\n   \n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }, [])\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h4 className=\"card-title\">\n          <a>Segment</a>\n        </h4>\n        <h4 className=\"card-title\">\n          <a>Data: {data}</a>\n        </h4>\n        <button \n        \n        className={`btn waves-effect waves-light ${btnStatus ? \"btn-blue\": \"btn-outline-blue\" }`}\n        \n        \n        onClick={() => {\n          toggleOnOff(\"on\")\n          setStatus(true)\n        }\n        }\n        \n        >\n          On\n        </button>\n\n        <button \n          className={`btn waves-effect waves-light ${!btnStatus ? \"btn-blue\": \"btn-outline-blue\" }`}\n         \n          onClick={() => {\n            toggleOnOff(\"off\")\n            setStatus(false)\n            setData('0000')\n          }\n          }\n         >\n          Off\n        </button>\n\n        <div className=\"mt-2\">\n          <form\n            onSubmit={e => {\n              e.preventDefault();\n\n              displayNumbers(input);\n            }}\n          >\n            <div className=\"form-group\">\n              <label>Display numbers</label>\n              <input\n                disabled={btnStatus ? false: true}\n                ref={inputRef}\n                // onBlur={() => validator.showMessageFor(\"numbers\")}\n                name=\"numbers\"\n                value={input}\n                onChange={e => setInput(e.target.value)}\n                className=\"form-control\"\n              />\n              {validator.message(\"numbers\", input, \"required|numeric|max:4\")}\n            </div>\n            <button\n              onClick={() => {\n                validator.showMessages();\n              }}\n              className=\"btn btn-outline-primary\"\n              type=\"submit\"\n            >\n              Submit\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Segment;\n","import React from \"react\";\nimport axios from \"axios\";\nconst LEDColor = props => {\n\n\n    // if the sensor is on or off\n    const [btnStatus, setBtnStatus] = React.useState(false)\n  const sendDataLed = operation => {\n\n\n    const formData = {\n      color: props.color,\n      operation\n    };\n    axios\n      .post(\"led\", {...formData})\n      .then(res => {\n        console.log(res);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  return props.color ? (\n    <div className=\"card-body\">\n      {/* <h4 className=\"card-title\">\n        <a style={{ color: props.color }}>Green LED</a>\n      </h4> */}\n      <button\n        onClick={() => {\n            setBtnStatus(true)\n          sendDataLed(\"on\");\n        }}\n    \n        className={`btn waves-effect waves-light ${btnStatus ? \"btn-\" + props.color : \"btn-outline-\" + props.color }`}\n      >\n        On\n      </button>\n\n      <button\n        \n        onClick={() => {\n          sendDataLed(\"off\");\n          setBtnStatus(false)\n        }}\n        className={`btn waves-effect waves-light ${!btnStatus ? \"btn-\" + props.color : \"btn-outline-\" + props.color }`}\n      >\n        Off\n      </button>\n    </div>\n  ) : (\n    <React.Fragment></React.Fragment>\n  );\n};\n\nexport default LEDColor;\n","import React from \"react\";\nimport LEDColor from \"./LEDColor\";\nconst LED = () => {\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h4 className=\"card-title\">\n          <a>LED</a>\n        </h4>\n      </div>\n      {/* RED LED */}\n      <LEDColor color=\"red\" />\n      {/* <div className=\"card-body\">\n        <h4 className=\"card-title\">\n          <a style={{ color: \"red\" }}>Red LED</a>\n        </h4>\n        <button className=\"btn btn-red\">On</button>\n\n        <button className=\"btn btn-red\">Off</button>\n      </div> */}\n      {/* BLUE LED */}\n      <LEDColor color=\"blue\" />\n      {/* <div className=\"card-body\">\n        <h4 className=\"card-title\">\n          <a style={{ color: \"blue\" }}>Blue LED</a>\n        </h4>\n        <button className=\"btn btn-blue\">On</button>\n\n        <button className=\"btn btn-blue\">Off</button>\n      </div> */}\n\n      {/* Yellow LED */}\n      <LEDColor color=\"yellow\" />\n\n      {/* <div className=\"card-body\">\n        <h4 className=\"card-title\">\n          <a style={{ color: \"#ada61f\" }}>Yellow LED</a>\n        </h4>\n        <button className=\"btn btn-yellow\">On</button>\n\n        <button className=\"btn btn-yellow\">Off</button>\n      </div> */}\n\n      {/* Green LED */}\n      <LEDColor color=\"green\" />\n\n      {/* <div className=\"card-body\">\n        <h4 className=\"card-title\">\n          <a style={{ color: \"green\" }}>Green LED</a>\n        </h4>\n        <button className=\"btn btn-green\">On</button>\n\n        <button className=\"btn btn-green\">Off</button>\n      </div> */}\n    </div>\n  );\n};\n\nexport default LED;\n","import React from \"react\";\nimport PusherClient from \"../store/Pusher\";\nimport axios from \"axios\";\nconst Motion = () => {\n  const [data, setData] = React.useState(\"0\");\n  const [btnStatus, setStatus] = React.useState(false)\n\n  const [detected, setDetected] = React.useState(false)\n\n  React.useEffect(() => {\n    const pusher = PusherClient.pusherClient;\n\n    const channel = pusher.subscribe(\"motion-channel\");\n    channel.bind(\"motion-data-event\", data => {\n      const response = data;\n\n      if(response === \"DETECTED\") {\n        setDetected(true)\n        setData(response)\n      } else {\n        setDetected(false)\n        setData(\"None\")\n      }\n      // setData(response);\n    });\n\n    fetchAPI()\n    \n  }, []);\n\n  const fetchAPI = () => {\n    axios.get('/pir')\n    .then((res) => {\n      setStatus(res.data.status)\n    })\n    .catch(err => console.log(err))\n  }\n\n  const sendDataLed = operation => {\n    const formData = {\n      operation\n    };\n    axios\n      .post(\"pir\", { ...formData })\n      .then(res => {\n        console.log(res);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h4 className=\"card-title\">\n          <a>Motion</a>\n        </h4>\n\n        <h4 className=\"card-title\">\n          {/* <a>Data: {data}</a> */}\n          <button\n           className={`btn ${detected ? \"btn-danger\": \"btn-outline-danger\" }`}\n          style={{ borderRadius: '45%' }}>o</button>\n        </h4>\n\n        <button\n          onClick={() => {\n            sendDataLed(\"on\");\n            setStatus(true)\n          }}\n          className={`btn waves-effect waves-light ${btnStatus ? \"btn-blue\": \"btn-outline-blue\" }`}\n        >\n          On\n        </button>\n        <button\n          onClick={() => {\n            sendDataLed(\"off\");\n            setStatus(false)\n            setDetected(false)\n          }}\n          className={`btn waves-effect waves-light ${!btnStatus ? \"btn-blue\": \"btn-outline-blue\" }`}\n        >\n          Off\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Motion;\n","import React from \"react\";\nimport PusherClient from \"../store/Pusher\";\nimport axios from \"axios\";\n// 'ultra-channel', 'ultra-data-event'\nconst Distance = () => {\n  const [data, setData] = React.useState(\"0\");\n\n  const [convert, setConvert] = React.useState(\"CM\")\n\n  const [btnStatus, setStatus] = React.useState(false)\n\n  React.useEffect(() => {\n    const pusher = PusherClient.pusherClient;\n\n    const channel = pusher.subscribe(\"ultra-channel\");\n    channel.bind(\"ultra-data-event\", data => {\n      const response = JSON.stringify(data);\n      try {\n          let floatValue: number = parseFloat(response)\n          let value: string = floatValue.toFixed(2)\n          if(convert === 'M') {\n            let meterValue: number = parseFloat(value)\n            meterValue /= 100\n          \n            // floatValue /= 100\n            setData(meterValue.toFixed(4))\n\n          } else if (convert === 'CM'){\n            setData(value)\n          }\n\n      } catch(e) {\n        setData('0');\n      }\n\n    });\n  }, [convert]);\n\n  React.useEffect(() => {\n    axios.get('/ultra')\n    .then(res => {\n      setStatus(res.data.status)\n    })\n    .catch(err => console.log(err))\n  }, [])\n\n  const sendDataLed = operation => {\n    const formData = {\n      operation\n    };\n    axios\n      .post(\"ultra\", { ...formData })\n      .then(res => {\n        console.log(res);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h4 className=\"card-title\">\n          <a>Distance</a>\n        </h4>\n\n        <h4 className=\"card-title\">\n          <a>Data: {data}</a>\n        </h4>\n\n        <div className=\"dropdown\">\n          <button\n            className=\"btn btn-info dropdown-toggle\"\n            type=\"button\"\n            id=\"dropdownMenuButton\"\n            data-toggle=\"dropdown\"\n            aria-haspopup=\"true\"\n            aria-expanded=\"false\"\n          >\n            {convert}\n          </button>\n          <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n            <a\n            onClick={() => {\n              setConvert('M')\n            }}\n            className=\"dropdown-item\">\n              M\n            </a>\n            <a \n               onClick={() => {\n                setConvert('CM')\n              }}\n            className=\"dropdown-item\" >\n              CM\n            </a>\n        \n          </div>\n        </div>\n\n\n{/* ON OFF BTN */}\n        <button\n          onClick={() => {\n            sendDataLed(\"on\");\n            setStatus(true)\n          }}\n          // className=\"btn btn-outline-blue\"\n          className={`btn waves-effect waves-light ${btnStatus ? \"btn-blue\": \"btn-outline-blue\" }`}\n\n        >\n          On\n        </button>\n\n        <button\n          onClick={() => {\n            sendDataLed(\"off\");\n            setStatus(false)\n            setData('0')\n\n          }}\n          className={`btn waves-effect waves-light ${!btnStatus ? \"btn-blue\": \"btn-outline-blue\" }`}\n        >\n          Off\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Distance;\n","export const KEY = \"user:storage\"\nexport default class User {\n  static save(data) {\n    localStorage.setItem(KEY, JSON.stringify(data));\n  }\n\n  static load(): string {\n    const data: string = localStorage.getItem(KEY) || '';\n    return data ;\n  }\n\n  static clear() {\n    localStorage.removeItem(KEY);\n  }\n}\n","import React from \"react\";\nimport User from \"../store/User\";\n\ninterface JumboProps {\n  setAuth: any;\n}\n\nconst Jumbo: React.FC<JumboProps> = props => {\n  return (\n    <div className=\"container-fluid mt-3\">\n      <div className=\"jumbotron\">\n        <h1>Sensors Controller</h1>\n\n        <button \n        onClick={() => {\n          User.clear();\n          props.setAuth(false)\n        }} \n        className=\"btn btn-danger\">Logout</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Jumbo;\n","import React from \"react\";\nimport axios from 'axios';\nimport User from '../store/User'\nimport { NotificationManager } from \"react-notifications\";\ninterface LoginProps {\n  setAuth: any;\n}\n\nconst Login: React.FC<LoginProps> = props => {\n\n\n    const [username, setUsername] = React.useState('');\n    const [password, setPassword] = React.useState('');\n\n  React.useEffect(() => {\n    // setTimeout(() => {\n    //   props.setAuth(true);\n    // }, 4000);\n  }, []);\n\n\n  const login = e => {\n      e.preventDefault()\n      const loginData = {\n        username,\n        password\n      }\n      axios.post('/auth/login', {...loginData})\n      .then((res) => {\n            if(res.data.payload.token) {\n              User.save(res.data.payload.token)\n              props.setAuth(true)\n            }\n      })\n      .catch(err => {\n\n        NotificationManager.error('Username or password is incorrect')\n          console.log(err)\n      })\n  }\n\n\n\n  return (\n    <div className=\"row mt-5\">\n      <div className=\"col-md-6 offset-md-3 col-12 col-sm-12\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4>Login to system</h4>\n            <form\n            onSubmit={login}\n            >\n              <label>Username</label>\n              <input onChange={(e) => setUsername(e.target.value)} type=\"text\" className=\"form-control\" />\n              <label>Password</label>\n              <input onChange={(e) => setPassword(e.target.value)} type=\"password\" className=\"form-control\" />\n              <input type=\"submit\" value=\"Login\" className=\"btn btn-primary mt-4\"/>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport Segment from \"../components/Segment\";\nimport LED from \"../components/LED\";\nimport Motion from \"../components/Motion\";\nimport Distance from \"../components/Distance\";\nimport Jumbo from \"../components/Jumbo\";\nimport Authentication from \"../hoc/Authentication\";\ninterface SensorProps {\n  setAuth: any;\n}\n\n\nconst Sensor: React.FC<SensorProps> = props => {\n\n  return (\n    <React.Fragment>\n      <Jumbo setAuth={props.setAuth} />\n\n      <div className=\"container p-2\">\n        <div className=\"row\">\n          <div className=\"col-lg-6 col-12 col-sm-12 mt-3\">\n            <Distance />\n          </div>\n          <div className=\"col-lg-6 col-12 col-sm-12 mt-3\">\n            <Motion />\n          </div>\n        </div>\n        <div className=\"row mt-4\">\n          <div className=\"col-lg-6 col-12 col-sm-12 mt-3\">\n            <LED />\n          </div>\n\n          <div className=\"col-lg-6 col-12 col-sm-12 mt-3\">\n            <Segment />\n          </div>\n        </div>\n      </div>\n      \n    </React.Fragment>\n  );\n};\n\nexport default Authentication(Sensor);\n","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport Login from \"../pages/Login\";\nimport { string } from \"prop-types\";\nimport User from \"../store/User\";\n// this solution is based on Medium article but I can't find it\nconst Authentication = ChildComponent => {\n  return class HOC extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n\n    state = {\n      auth: false\n    };\n\n    componentWillMount() {\n\n        let token = User.load()\n        if(token) {\n          if(token.length > 0) {\n            this.setState({ auth: true })\n          }\n        }\n\n    }\n\n\n    setAuth = status => {\n      this.setState({\n        auth: status\n      });\n    };\n\n    render() {\n      return this.state.auth ? (\n        <ChildComponent {...this.props} setAuth={this.setAuth}/>\n      ) : (\n        <Login {...this.props} setAuth={this.setAuth} />\n      );\n    }\n  };\n};\n\nexport default Authentication;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Login from \"./pages/Login\";\nimport Sensor from \"./pages/Sensor\";\n\n// import Pusher from \"pusher-js\";\nimport { NotificationContainer } from \"react-notifications\";\n\nconst App: React.FC = () => {\n\n \n  return (\n    <React.Fragment>\n      <Sensor />\n      <NotificationContainer />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-notifications/lib/notifications.css';\n\nimport * as mqtt from 'mqtt'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}